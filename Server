import java.io.*;
import java.net.*;

public class Server {
    public static void main(String[] args) {
        int porta = 8080; // Porta que será reservada para o servidor

        try {
            // Cria o ServerSocket para escutar na porta 8080
            ServerSocket serverSocket = new ServerSocket(porta);
            System.out.println("Servidor aguardando conexão na porta " + porta + " !");

            // Aceita a conexão do cliente
            Socket clienteSocket = serverSocket.accept();
            System.out.println("Cliente conectado: " + clienteSocket.getInetAddress().getHostAddress());

            // Cria os streams de entrada e saída
            BufferedReader entrada = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));
            PrintWriter saida = new PrintWriter(clienteSocket.getOutputStream(), true);

            // Envia uma mensagem inicial para o cliente
            saida.println("Bem-vindo ao servidor! ");

            // Cria uma thread para receber mensagens do cliente
            Thread receberMensagens = new Thread(() -> {
                try {
                    String mensagemCliente;
                    while (true) {
                        mensagemCliente = entrada.readLine();
                        if (mensagemCliente == null || mensagemCliente.equalsIgnoreCase("sair")) {
                            System.out.println("Cliente pediu para sair.");
                            break;  // Sai do loop se o cliente enviar "sair"
                        }
                        System.out.println("Mensagem do cliente: " + mensagemCliente);
                    }
                } catch (IOException e) {
                    System.out.println("Erro ao ler mensagem do cliente: " + e.getMessage());
                }
            });
            receberMensagens.start();

            // Loop para enviar mensagens para o cliente
            BufferedReader teclado = new BufferedReader(new InputStreamReader(System.in));
            String mensagemServidor;
            while (true) {
                System.out.print("Digite uma mensagem para o cliente: ");
                mensagemServidor = teclado.readLine();

                if (mensagemServidor.equalsIgnoreCase("sair")) {
                    saida.println("Servidor encerrou a conexão.");
                    break;  // Sai do loop se o servidor enviar "sair"
                }

                saida.println(mensagemServidor);
            }

            // Fecha a conexão quando o loop terminar
            entrada.close();
            saida.close();
            clienteSocket.close();
            serverSocket.close();

        } catch (IOException e) {
            System.out.println("Erro ao configurar o servidor: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
